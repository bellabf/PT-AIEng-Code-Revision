---
title: "Revision "
format:
  revealjs:
    theme: black
    transition: slide
    slide-number: true
  html:
    theme: cosmo
    toc: true
    number-sections: true
    code-fold: show
    html-math-method: katex
  pdf:
    documentclass: article
    papersize: letter
    toc: true
    number-sections: true
    colorlinks: true
execute:
  echo: true
  output: true
slide-level: 2
jupyter: python3
---


# Numpy Lab 

## Q1: Creating Random Arrays

```{python}
import numpy as np

# Option 1: Using np.random.random()
a = np.random.random((2, 3, 5))
print("Option 1:\n", a)

# Option 2: Using np.random.rand()
a = np.random.rand(2, 3, 5)
print("\nOption 2:\n", a)

# Option 3: Using np.random.randn()
a = np.random.randn(2, 3, 5)
print("\nOption 3:\n", a)

# Additional random array creation methods
methods = [
    ("Random integers", np.random.randint(0, 9, (2, 3, 5))),
    ("Uniform distribution", np.random.uniform(1, 10, (2, 3, 5))),
    ("Random choice", np.random.choice([1, 2, 3, 4, 5], (2, 3, 5))),
    ("Beta distribution", np.random.beta(0.5, 0.5, (2, 3, 5))),
    ("Normal distribution", np.random.normal(0, 1, (2, 3, 5))),
    ("Poisson distribution", np.random.poisson(5, (2, 3, 5))),
    ("Binomial distribution", np.random.binomial(n=10, p=0.5, size=(2, 3, 5))),
    ("F-distribution", np.random.f(5, 2, (2, 3, 5)))
]

for name, array in methods:
    print(f"\n{name}:\n", array)
```

## Q7: Comparing Array Sizes

```{python}
# Create sample arrays
a = np.random.f(5, 2, (2, 3, 5))
b = np.ones((5, 2, 3))

# Using numpy
print("Using numpy size attribute:")
print(a.size == b.size)

# Pythonic way
print("\nUsing list comprehension:")
len_a = len([value for sublist_1 in a for sublist_2 in sublist_1 for value in sublist_2])
len_b = len([value for sublist_1 in b for sublist_2 in sublist_1 for value in sublist_2])
print(len_a == len_b)

# Comparing shapes
print("\nComparing shapes:")
print(a.shape == b.shape)
```

## Q15: Labeling Values in an Array

```{python}
# Create a sample array d
d = np.random.rand(2, 3, 5)
d_min, d_max = d.min(), d.max()
d_mean = d.mean()


f = np.empty((2, 3, 5))

# Method 1

f[(d > d_min) & (d < d_mean)] = 25
f[(d > d_mean) & (d < d_max)] = 75
f[d == d_mean] = 50
f[d == d_min] = 0
f[d == d_max] = 100

# Method 2
f = np.empty((2, 3, 5))
f = np.where((d > d_min) & (d < d_mean), 25, f)
f = np.where((d > d_mean) & (d < d_max), 75, f)
f = np.where(d == d_mean, 50, f)
f = np.where(d == d_min, 0, f)
f = np.where(d == d_max, 100, f)

print("Method 1 (np.where):")
print(f)

# Method 3
f = np.empty((2, 3, 5), dtype=str)

for s in range(d.shape[0]):
    for u in range(d.shape[1]):
        for m in range(d.shape[2]):
            if d_min < d[s, u, m] < d_mean:
                f[s, u, m] = '25'
            elif d_mean < d[s, u, m] < d_max:
                f[s, u, m] = '75'
            elif d[s, u, m] == d_mean:
                f[s, u, m] = '50'
            elif d[s, u, m] == d_min:
                f[s, u, m] = '0'
            elif d[s, u, m] == d_max:
                f[s, u, m] = '100'

print("\nMethod 2 (loops):")
print(f)
```


# Pandas Lab 1

## Q5 - Renaming Columns

```{python}
import pandas as pd 
b = [[53.1, 95.0, 67.5, 35.0, 78.4],
     [61.3, 40.8, 30.8, 37.8, 87.6],
     [20.6, 73.2, 44.2, 14.6, 91.8],
     [57.4, 0.1, 96.1, 4.2, 69.5],
     [83.6, 20.5, 85.4, 22.8, 35.9],
     [49.0, 69.0, 0.1, 31.8, 89.1],
     [23.3, 40.7, 95.0, 83.8, 26.9],
     [27.6, 26.4, 53.8, 88.8, 68.5],
     [96.6, 96.4, 53.4, 72.4, 50.1],
     [73.7, 39.0, 43.2, 81.6, 34.7]]


df = pd.DataFrame(b)    
# Method 1
column_names = ['Score_1', 'Score_2', 'Score_3', 'Score_4', 'Score_5']
df.columns = column_names

# Method 2

column_names = [f'Score_{i+1}' for i in range(df.shape[1])]
df.columns = column_names


```



# Intro to Sklearn

## Question
```{python}


```

### New question

```{python}


```


# Intro to logistic regression